{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth-service\";\n\n//   export const register = (username, email, password) => (dispatch) => {\n//     return AuthService.register(username, email, password).then(\n//       (response) => {\n//         dispatch({\n//           type: REGISTER_SUCCESS,\n//         });\n\n//         dispatch({\n//           type: SET_MESSAGE,\n//           payload: response.data.message,\n//         });\n\n//         return Promise.resolve();\n//       },\n//       (error) => {\n//         const message =\n//           (error.response &&\n//             error.response.data &&\n//             error.response.data.message) ||\n//           error.message ||\n//           error.toString();\n\n//         dispatch({\n//           type: REGISTER_FAIL,\n//         });\n\n//         dispatch({\n//           type: SET_MESSAGE,\n//           payload: message,\n//         });\n\n//         return Promise.reject();\n//       }\n//     );\n//   };\n\nexport const login = (email, password) => dispatch => {\n  return AuthService.login(email, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","login","email","password","dispatch","then","data","type","payload","user","Promise","resolve","error","message","response","toString","reject","logout"],"sources":["/Users/flavius_gabrielstasac/Documents/workspace/React-Lateral-Start/TODORedux/todo-redux/src/actions/auth.js"],"sourcesContent":["import { LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\n\nimport AuthService from \"../services/auth-service\";\n\n//   export const register = (username, email, password) => (dispatch) => {\n//     return AuthService.register(username, email, password).then(\n//       (response) => {\n//         dispatch({\n//           type: REGISTER_SUCCESS,\n//         });\n\n//         dispatch({\n//           type: SET_MESSAGE,\n//           payload: response.data.message,\n//         });\n\n//         return Promise.resolve();\n//       },\n//       (error) => {\n//         const message =\n//           (error.response &&\n//             error.response.data &&\n//             error.response.data.message) ||\n//           error.message ||\n//           error.toString();\n\n//         dispatch({\n//           type: REGISTER_FAIL,\n//         });\n\n//         dispatch({\n//           type: SET_MESSAGE,\n//           payload: message,\n//         });\n\n//         return Promise.reject();\n//       }\n//     );\n//   };\n\nexport const login = (email, password) => (dispatch) => {\n  return AuthService.login(email, password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,MAAM,EAAEC,WAAW,QAAQ,SAAS;AAExE,OAAOC,WAAW,MAAM,0BAA0B;;AAElD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAMC,QAAQ,IAAK;EACtD,OAAOJ,WAAW,CAACC,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC,CAACE,IAAI,CAC3CC,IAAI,IAAK;IACRF,QAAQ,CAAC;MACPG,IAAI,EAAEX,aAAa;MACnBY,OAAO,EAAE;QAAEC,IAAI,EAAEH;MAAK;IACxB,CAAC,CAAC;IAEF,OAAOI,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC,EACAC,KAAK,IAAK;IACT,MAAMC,OAAO,GACVD,KAAK,CAACE,QAAQ,IACbF,KAAK,CAACE,QAAQ,CAACR,IAAI,IACnBM,KAAK,CAACE,QAAQ,CAACR,IAAI,CAACO,OAAO,IAC7BD,KAAK,CAACC,OAAO,IACbD,KAAK,CAACG,QAAQ,EAAE;IAElBX,QAAQ,CAAC;MACPG,IAAI,EAAEV;IACR,CAAC,CAAC;IAEFO,QAAQ,CAAC;MACPG,IAAI,EAAER,WAAW;MACjBS,OAAO,EAAEK;IACX,CAAC,CAAC;IAEF,OAAOH,OAAO,CAACM,MAAM,EAAE;EACzB,CAAC,CACF;AACH,CAAC;AAED,OAAO,MAAMC,MAAM,GAAG,MAAOb,QAAQ,IAAK;EACxCJ,WAAW,CAACiB,MAAM,EAAE;EAEpBb,QAAQ,CAAC;IACPG,IAAI,EAAET;EACR,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}